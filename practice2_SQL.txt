​
====================================================================================================================

HACKER_RANK
​
====================================================================================================================


Euclidean Distance Formula

Distance= (a−c) 2 +(b−d) 2


Consider p1(a,b) and p2(c,d) to be two points on a 2D plane where  are the respective minimum and maximum values of Northern Latitude (LAT_N) and  are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.

Query the Euclidean Distance between points  and  and format your answer to display 4 decimal digits.
 



SELECT ROUND(
    SQRT(POWER(MAX(LAT_N) - MIN(LAT_N), 2) + POWER(MAX(LONG_W) - MIN(LONG_W), 2)),
    4
) AS EuclideanDistance
FROM STATION;


​
====================================================================================================================

Table: Activity

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
(player_id, event_date) is the primary key (combination of columns with unique values) of this table.
This table shows the activity of players of some games.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.
 

Write a solution to find the first login date for each player.

Return the result table in any order.



answer: 

SELECT player_id, min(event_date) as first_login
FROM Activity
group by player_id;

====================================================================================================================

Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
The STATION table is described as follows:
where LAT_N is the northern latitude and LONG_W is the western longitude.
Sample Input
For example, CITY has four entries: DEF, ABC, PQRS and WXY.

Sample Output

ABC 3
PQRS 4
Explanation

When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with lengths  and . The longest name is PQRS, but there are  options for shortest named city. Choose ABC, because it comes first alphabetically.

Note
You can write two separate queries to get the desired output. It need not be a single query.

ANSWER:

(
    SELECT CITY, LENGTH(CITY) AS NAME_LENGTH
    FROM STATION
    ORDER BY LENGTH(CITY) ASC, CITY ASC
    LIMIT 1
)
UNION
(
    SELECT CITY, LENGTH(CITY) AS NAME_LENGTH
    FROM STATION
    ORDER BY LENGTH(CITY) DESC, CITY ASC
    LIMIT 1
);

====================================================================================================================

Consider P1(a,b) and P2(c,d) to be two points on a 2D plane. 

a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points p1 and p2 and round it to a scale of  decimal places.

SELECT ROUND(
    ABS(MIN(LAT_N) - MAX(LAT_N)) + ABS(MIN(LONG_W) - MAX(LONG_W)),
    4
) AS ManhattanDistance
FROM STATION;



Manhattan Distance Formula:

Distance=∣a−c∣+∣b−d∣




Explanation:
MIN(LAT_N) gives a

MIN(LONG_W) gives b

MAX(LAT_N) gives c

MAX(LONG_W) gives d

ABS(...) + ABS(...) gives the Manhattan distance

ROUND(..., 4) rounds the result to 4 decimal places

====================================================================================================================

We define an employee's total earnings to be their monthly (salary x months) worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.


answer

SELECT 
    SALARY * MONTHS AS MAX_EARNING,
    COUNT(*) AS EMP_COUNT
FROM 
    EMPLOYEE
GROUP BY 
    MAX_EARNING
HAVING 
    MAX_EARNING = (
        SELECT MAX(SALARY * MONTHS) FROM EMPLOYEE
    );

====================================================================================================================

Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of 2 decimal places. 
The sum of all values in LONG_W rounded to a scale of 2 decimal places.



answer:


SELECT 
    ROUND(SUM(LAT_N), 2), 
    ROUND(SUM(LONG_W), 2) 
FROM 
    STATION;

====================================================================================================================

Table: Weather

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| recordDate    | date    |
| temperature   | int     |
+---------------+---------+
id is the column with unique values for this table.
There are no different rows with the same recordDate.
This table contains information about the temperature on a certain day.
 

Write a solution to find all dates' id with higher temperatures compared to its previous dates (yesterday).

Return the result table in any order.


answer:

SELECT w1.id
FROM Weather w1
JOIN Weather w2 
  ON DATEDIFF(w1.recordDate, w2.recordDate) = 1
WHERE w1.temperature > w2.temperature;

====================================================================================================================

Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to 4 decimal places.


answer:



SELECT TRUNCATE(SUM(LAT_N), 4)
FROM STATION
WHERE LAT_N BETWEEN 38.7880 AND 137.2345;


====================================================================================================================


Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

ANSWER:

SELECT DISTINCT CITY
FROM STATION
WHERE LOWER(LEFT(CITY, 1)) IN ('a','e','i','o','u');




Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

ANSWER:

SELECT DISTINCT CITY
FROM STATION
WHERE LOWER(RIGHT(CITY, 1)) IN ('a','e','i','o','u');





Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

ANSWER:

SELECT DISTINCT CITY
FROM STATION
WHERE LOWER(LEFT(CITY, 1)) IN ('a','e','i','o','u')
    AND LOWER(RIGHT(CITY,1)) IN ('a','e','i','o','u');





Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

answer:

SELECT DISTINCT CITY
FROM STATION 
WHERE LOWER(LEFT(CITY, 1)) NOT IN ('a','e','i','o','u');





Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

answer:

SELECT DISTINCT CITY
FROM STATION
WHERE LOWER(RIGHT(CITY, 1)) NOT IN ('a','e','i','o','u');


====================================================================================================================


Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.

Write a query calculating the amount of error (i.e.: actual - miscalculated  average monthly salaries), and round it up to the next integer.




SELECT 
    CEIL(AVG(Salary) - AVG(CAST(REPLACE(Salary, '0', '') AS UNSIGNED))) AS Error
FROM 
    EMPLOYEES;





AVG(Salary): Computes the correct average salary.
REPLACE(Salary, '0', ''): Removes all 0s from the salary (Samantha's mistake).
CAST(... AS UNSIGNED): Converts the modified salary string to a number for averaging.
AVG(...): Averages the incorrect salaries.
AVG(correct) - AVG(mistake): Gives the error in average.
CEIL(...): Rounds the error up to the next integer, as required.
This will output a single column Error with the rounded-up difference.


====================================================================================================================

SQL_PRACTICE
​
====================================================================================================================


use practice_db;
drop table account;

CREATE TABLE account (
    ano INT PRIMARY KEY,
    aname VARCHAR(20),
    address VARCHAR(50)
);
INSERT INTO account (ano, aname, address) VALUES
(101, 'nirja singh', 'bangalore'),
(102, 'rohan gupta', 'chennai'),
(103, 'ali reza', 'hydrabad'),
(104, 'rishabh jain', 'chennai'),
(105, 'simran kaur', 'chandigarh');


CREATE TABLE TRANSACT (
    TRNO VARCHAR(10) PRIMARY KEY,
    ANO INT,
    AMOUNT INT,
    TYPE VARCHAR(20),
    DOT DATE,
    FOREIGN KEY (ANO) REFERENCES account(ano)
);
ALTER TABLE account ADD CONSTRAINT unique_ano UNIQUE (ano);

INSERT INTO TRANSACT VALUES ('T001', 101, 2500, 'Withdraw', '2017-12-21');
INSERT INTO TRANSACT VALUES ('T002', 103, 3000, 'Deposit', '2017-06-01');
INSERT INTO TRANSACT VALUES ('T003', 102, 2000, 'Withdraw', '2017-05-12');
INSERT INTO TRANSACT VALUES ('T004', 103, 1000, 'Deposit', '2017-10-22');
INSERT INTO TRANSACT VALUES ('T005', 102, 12000, 'Deposit', '2017-11-06');


SELECT * FROM TRANSACT
WHERE TYPE = 'Withdraw';


-- To display ANO and AMOUNT of all Deposit and Withdrawals 
-- done in month of ‘May’ 2017 from table TRANSACT
SELECT ANO, AMOUNT FROM TRANSACT
WHERE MONTH(DOT) = 5 AND YEAR(DOT) = 2017;


-- To display first date of transaction (DOT) from table TRANSACT for Account having ANO as 102
SELECT MIN(DOT) FROM TRANSACT
WHERE ANO = 102;

 -- To display ANO, ANAME, AMOUNT and DOT of those persons from ACCOUNT and TRANSACT 
-- table who have done transaction less than or equal to 3000
SELECT A.ANO, A.ANAME, T.AMOUNT, T.DOT
FROM ACCOUNT A
JOIN TRANSACT T ON A.ANO = T.ANO
WHERE T.AMOUNT <= 3000;


====================================================================================================================


use practice_db;

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100)
);

INSERT INTO customers (customer_id, name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie'),
(4, 'Diana'),
(5, 'Ethan'),
(6, 'Fiona'),
(7, 'George'),
(8, 'Hannah');


select c.customer_id, c.name
from customers c left join orders o
on c.customer_id = o.customer_id 
and o.order_date >= curdate() - interval 3 month
where o.order_id is null;


====================================================================================================================

use practice_db;
SELECT * FROM practice_db.emp;

insert into emp values
(103, "Prayagraj", "Shelar","2020-06-20",25000,102,90);


SELECT first_name, last_name, COUNT(*)
FROM emp
GROUP BY first_name, last_name
HAVING COUNT(*) > 1;


====================================================================================================================

use practice_db;

create table emp(
emp_id int,
first_name varchar(20),
last_name varchar(20),
hire_date date,
salary float,
manager_id int,
department_id int
);

insert into emp (emp_id, first_name, last_name, hire_date, salary, manager_id, department_id)
values
(100, 'Prayagraj', 'Shelar', '2020-06-20', 25000, 102, 90),
(101, 'Abhishek', 'More', '2020-05-10', 25000, 103, 50),
(102, 'Sreehari', 'Itha', '2021-07-18', 30000, 101, 80);

create table department(
department_id int,
department_name varchar(20)
);
insert into department values(20,"sales"),
(50, "analysis"),
(80,"Developer"),
(90,"Data Engineer");

select e.first_name, e.last_name, d.department_name
from emp e join department d
where e.department_id = d.department_id;


====================================================================================================================

use practice_db;

select * from orders;

INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(6, 2, '2025-05-27', 120.00),
(7, 3, '2025-05-28', 180.00),
(8, 4, '2025-05-30', 250.00),
(9, 5, '2025-06-01', 175.75),
(10, 6, '2025-06-02', 99.00);

select curdate();
select curdate() - interval 7 day;

select *
from orders
where order_date >= curdate() - interval 7 day;


====================================================================================================================

use practice_db;
create table occupations(
name varchar(50),
occupation varchar(50)
);

INSERT INTO occupations (Name, Occupation) VALUES
('Jenny', 'Doctor'),
('Samantha', 'Doctor'),
('Ashley', 'Professor'),
('Christeen', 'Professor'),
('Ketty', 'Professor'),
('Meera', 'Singer'),
('Priya', 'Singer'),
('Jane', 'Actor'),
('Julia', 'Actor'),
('Maria', 'Actor');


select 
	max(case when occupation = "Doctor" then name end) as Doctor,
	max(case when occupation = "Professor" then name end) as Professor,
	max(case when occupation = "Singer" then name end) as Singer,
	max(case when occupation = "Actor" then name end) as Actor
from (
	select name, occupation,
    ROW_NUMBER() over (partition by occupation order by name) as row_num
    from occupations
) as ordered_occupations
group by row_num
order by row_num;


====================================================================================================================

use practice_db;

with recursive 
numbers as (
select 2 as num
union all
select num + 1 from numbers where num + 1 <= 20
),
primes AS (
    SELECT n.num
    FROM numbers n
    WHERE NOT EXISTS (
        SELECT 1
        FROM numbers d
        WHERE d.num < n.num AND d.num > 1 AND n.num % d.num = 0
    )
)
SELECT GROUP_CONCAT(num SEPARATOR '&') AS prime_list
FROM primes;


====================================================================================================================


-- Drop tables if they exist
DROP TABLE IF EXISTS order_items;
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS products;
DROP TABLE IF EXISTS customers;

-- Customers
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    registration_date DATE
);

-- Products
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10,2),
    stock INT
);

-- Orders
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Order Items
CREATE TABLE order_items (
    item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Sample data
INSERT INTO customers VALUES
(1, 'Alice', 'alice@example.com', '2024-01-15'),
(2, 'Bob', 'bob@example.com', '2024-02-10'),
(3, 'Charlie', 'charlie@example.com', '2024-03-05');

INSERT INTO products VALUES
(1, 'Laptop', 'Electronics', 1200.00, 15),
(2, 'Smartphone', 'Electronics', 800.00, 5),
(3, 'Desk Chair', 'Furniture', 150.00, 25),
(4, 'Monitor', 'Electronics', 300.00, 8),
(5, 'Notebook', 'Stationery', 5.00, 200);

INSERT INTO orders VALUES
(101, 1, '2024-05-10', 2000.00),
(102, 2, '2024-05-15', 950.00),
(103, 1, '2024-06-01', 305.00);

INSERT INTO order_items VALUES
(1001, 101, 1, 1, 1200.00),
(1002, 101, 2, 1, 800.00),
(1003, 102, 3, 1, 150.00),
(1004, 102, 5, 10, 5.00),
(1005, 103, 4, 1, 300.00),
(1006, 103, 5, 1, 5.00);


====================================================================================================================

use practice_db;

create table events(
id int,
event_name varchar(100),
duration_sec int
);

insert into events (id, event_name, duration_sec) values
(1, 'Login Session', 3661),
(2, 'Video Play', 542),
(3, 'File Download', 128),
(4, 'Page View', 59),
(5, 'Session Timeout', 86399);


SELECT 
    id,
    event_name,
    duration_sec,
    SEC_TO_TIME(duration_sec) AS duration_time
FROM 
    events;


====================================================================================================================

USE PRACTICE_DB;

SELECT MAX(SALARY)
FROM emp
WHERE SALARY < (SELECT MAX(SALARY)
FROM EMP);


====================================================================================================================

use practice_db;
create table employee_info(
empno int,
ename varchar(20),
dept varchar(20),
salary int,
comm int
);

insert into employee_info (empno, ename, dept, salary, comm) values
(1, 'ankit','hr',20000, 1200),
(2, 'sujeet','accounts', 24000, null),
(3, 'vijay', 'hr', 28000, 2000),
(4, 'nitin', 'sales', 18000, 3000),
(5, 'vikram', 'sales', 22000, 1700);


select ename, salary from employee_info
where ename like 'v%'
order by salary;

select * from employee_info
where dept = 'sales' and salary > 20000;


select COUNT(DISTINCT dept) AS distinct_dept_count
from employee_info;


update employee_info
set salary = 20000
where ename = 'nitin' and salary = 18000;


insert into employee_info (empno, ename, dept, salary, comm) values
(6, 'sumit', 'hr', 40000, 2000);


select avg(comm) from employee_info;

select ename, dept from employee_info
where dept in ('hr','account');

select ename, salary+100 as new_salary
from employee_info;


====================================================================================================================

SELECT e.FIRST_NAME, e.LAST_NAME
FROM employees e
JOIN departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
JOIN locations loc ON d.LOCATION_ID = loc.LOCATION_ID
WHERE e.MANAGER_ID IS NOT NULL
  AND loc.COUNTRY_ID = 'US';
  
SELECT FIRST_NAME, LAST_NAME
FROM employees
WHERE MANAGER_ID IS NOT NULL
  AND DEPARTMENT_ID IN (
      SELECT DEPARTMENT_ID
      FROM departments
      WHERE LOCATION_ID = (
      SELECT LOCATION_ID 
      FROM locations
      WHERE country_id = 'US'
      )
  );


====================================================================================================================

use practice_db;
CREATE TABLE employees_bull (
    EMPLOYEE_ID      INT PRIMARY KEY,
    FIRST_NAME       VARCHAR(50),
    LAST_NAME        VARCHAR(50),
    EMAIL            VARCHAR(50),
    PHONE_NUMBER     VARCHAR(20),
    HIRE_DATE        DATE,
    JOB_ID           VARCHAR(20),
    SALARY           DECIMAL(10,2),
    COMMISSION_PCT   DECIMAL(5,2),
    MANAGER_ID       INT,
    DEPARTMENT_ID    INT
);


INSERT INTO employees_bull (
    EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, 
    HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID
) VALUES
(100, 'Steven', 'King', 'SKING', '515.123.4567', '2003-06-17', 'AD_PRES', 24000.00, NULL, NULL, 90),
(101, 'Neena', 'Kochhar', 'NKOCHHAR', '515.123.4568', '2005-09-21', 'AD_VP', 17000.00, NULL, 100, 90),
(102, 'Lex', 'De Haan', 'LDEHAAN', '515.123.4569', '2001-01-13', 'AD_VP', 17000.00, NULL, 100, 90),
(103, 'Alexander', 'Hunold', 'AHUNOLD', '590.423.4567', '2006-01-03', 'IT_PROG', 9000.00, NULL, 102, 60),
(104, 'Bruce', 'Ernst', 'BERNST', '590.423.4568', '2007-05-21', 'IT_PROG', 6000.00, NULL, 103, 60),
(105, 'David', 'Austin', 'DAUSTIN', '590.423.4569', '2005-06-25', 'IT_PROG', 4800.00, NULL, 103, 60),
(106, 'Valli', 'Pataballa', 'VPATABAL', '590.423.4560', '2006-02-05', 'IT_PROG', 4800.00, NULL, 103, 60),
(107, 'Diana', 'Lorentz', 'DLORENTZ', '590.423.5567', '2007-02-07', 'IT_PROG', 4200.00, NULL, 103, 60),
(108, 'Nancy', 'Greenberg', 'NGREENBE', '515.124.4569', '2002-08-17', 'FI_MGR', 12000.00, NULL, 101, 100),
(109, 'Daniel', 'Faviet', 'DFAVIET', '515.124.4169', '2002-08-16', 'FI_ACCOUNT', 9000.00, NULL, 108, 100),
(110, 'John', 'Chen', 'JCHEN', '515.124.4269', '2005-09-28', 'FI_ACCOUNT', 8200.00, NULL, 108, 100),
(111, 'Ismael', 'Sciarra', 'ISCIARRA', '515.124.4369', '2005-09-30', 'FI_ACCOUNT', 7700.00, NULL, 108, 100),
(112, 'Jose Manuel', 'Urman', 'JMURMAN', '515.124.4469', '2006-03-07', 'FI_ACCOUNT', 7800.00, NULL, 108, 100),
(113, 'Luis', 'Popp', 'LPOPP', '515.124.4567', '2007-12-07', 'FI_ACCOUNT', 6900.00, NULL, 108, 100),
(114, 'Den', 'Raphaely', 'DRAPHEAL', '515.127.4561', '2002-12-07', 'PU_MAN', 11000.00, NULL, 100, 30),
(115, 'Alexander', 'Khoo', 'AKHOO', '515.127.4562', '2003-05-18', 'PU_CLERK', 3100.00, NULL, 114, 30),
(116, 'Shelli', 'Baida', 'SBAIDA', '515.127.4563', '2005-12-24', 'PU_CLERK', 2900.00, NULL, 114, 30),
(117, 'Sigal', 'Tobias', 'STOBIAS', '515.127.4564', '2005-07-24', 'PU_CLERK', 2800.00, NULL, 114, 30),
(118, 'Guy', 'Himuro', 'GHIMURO', '515.127.4565', '2006-11-15', 'PU_CLERK', 2600.00, NULL, 114, 30),
(119, 'Karen', 'Colmenares', 'KCOLMENA', '515.127.4566', '2007-08-10', 'PU_CLERK', 2500.00, NULL, 114, 30);


select FIRST_NAME, LAST_NAME, SALARY
from employees_bull
where SALARY > (select SALARY
from employees_bull
where LAST_NAME = "Himuro");


====================================================================================================================

SELECT * 
FROM your_table
WHERE DAYOFWEEK(date_column) IN (1, 7);  -- Sunday or Saturday

====================================================================================================================




















